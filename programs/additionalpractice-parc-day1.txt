Calculate Number of Days
Reference Code : p3Complexity : Level2
=======================================
Ram was weak in mathematics. One day his Maths teacher asked him to find out the number of days he lived on the earth and that was his homework. Since he was weak in mathematics he doesn't know how to calculate the number of days between two date. Guide him by a program that find number of days between the given two  given dates.

 
[Note:] Consider singular and plurals while printing. First date can be earlier than second date and vice versa.
[Constarints :] If any one of the date is not valid, then print “Invalid Date” else print number of days between two dates(Inclusive).

 
Input Format :
Read day1,month1,year1 and day2,month2,year2 line by line from the user
Output Format :
Print No of days between two dates (Inclusive).
 


Sample Input/Output Example 1:
Enter Date1
Enter day
1
Enter month
1
Enter year
2016
Enter Date2
Enter day
31
Enter month
12
Enter year
2016
366 days
 
 

Sample Input/Output Example 2:

Enter Date1

Enter day
32
Enter month
3
Enter year
2016
Enter Date2
Enter day
21
Enter month
1
Enter year
2017
Invalid Date
 
Sample Input/Output Example 3:
Enter Date1
Enter day
3
Enter month
3
Enter year
2016
Enter Date2
Enter day
3
Enter month
3
Enter year
2016
1 day
 =========================
 
 import java.util.*;
02
import java.text.*;
03
import java.io.*;
04
class Main
05
{
06
    public static void main(String args[])throws Exception
07
    {
08
        Scanner sc=new Scanner(System.in);
09
        String m,n,o,p,q,r;
10
        System.out.println("Enter Date1");
11
        System.out.println("Enter day");
12
        m=sc.nextLine();
13
        int a=Integer.parseInt(m);
14
        System.out.println("Enter month");
15
        n=sc.nextLine();
16
        int b=Integer.parseInt(n);
17
        System.out.println("Enter year");
18
        o=sc.nextLine();
19
        String f=m+" "+n+" "+o;
20
         
21
         
22
         
23
         
24
        System.out.println("Enter Date2");
25
        System.out.println("Enter day");
26
        p=sc.nextLine();
27
        int c=Integer.parseInt(p);
28
        System.out.println("Enter month");
29
        q=sc.nextLine();
30
        int d=Integer.parseInt(q);
31
        System.out.println("Enter year");
32
        r=sc.nextLine();
33
        String g=p+" "+q+" "+r;
34
         
35
        SimpleDateFormat myformat=new SimpleDateFormat("dd MM yyyy");
36
        Date date1=myformat.parse(f);
37
         Date date2=myformat.parse(g);
38
         long diff=date2.getTime()-date1.getTime();
39
         int day=(int)(diff/(3600000*24));
40
          
41
         if(a<32&&c<32&&b<13&&d<13)
42
         {
43
             if(day==0)
44
             {
45
                 System.out.println(day+1+" day");
46
             }
47
             else
48
             {
49
                 System.out.println(day+1+" days");
50
             }
51
         }
52
         else
53
         {
54
             System.out.println("Invalid Date");
55
         }
56
         
57
         
58
    }
59
}
=======================#############################====================
Rajee's Tasting Experience

Reference Code : p2Complexity : Level3

===========================================
Rajee attended a tasting party hosted by a restaurant. The dishes were arranged on a number of tables randomly such that the table arrangement resembled a matrix. The participants were allowed to taste all the dishes that they can reach from their table. Assuming that a Rajee can reach all the tables surrounding her, help her find a table from where she can taste the maximum number of dishes.
 
Input Format:
The first line conists of the number of rows(m) of the matrix arrangement.
The second line consists of the number of columns(n) of the matrix arrangement
The next m*n lines consists of the number of dishes in each table.
 
Output Format:
The output consists of the coordinates for the optimal table where she could taste the maximum number of dishes.

[All elements in Bold corresponds to Input and the rest corresponds to the Output]
Sample Output 1:
Enter the number of rows and columns:
3
3
Enter the matrix elements
1
2
3
4
5
6
7
8
9
Result: x:2 y:2 45
 
Sample Output 2:
Enter the number of rows and columns:
5
5
Enter the matrix elements
47
15
40
32
30
41
4
30
6
48
15
38
44
20
9
9
3
5
30
15
13
44
2
41
30
Result: x:2 y:2 274
==========================
  import java.util.*; 
public class Main {public static void main (String args[]){ 
    Scanner sc=new Scanner(System.in); 
    System.out.println("Enter the number of rows and columns:"); 
    int r=sc.nextInt(); 
    int c=sc.nextInt(); 
    int a[][]=new int[r][c]; 
    
    int b[][]=new int[r][c]; 
    int sum=0,max=0,x=0,y=0; 
    int i,j; 
    System.out.println("Enter the matrix elements"); 
    for(i=0;i<r;i++) 
    
    for(j=0;j<c;j++) 
    a[i][j]=sc.nextInt();   
    
    for(i=0;i<r;i++) 
    {
        for(j=0;j<c;j++) 
    {
        sum=0;
        if((i-1)>=0 && (j-1)>=0 && (i-1)<r &&(j-1)<c) 
        sum=sum+a[i-1][j-1];
        if((i-1)>=0 && j>=0 && (i-1)<r &&j<c)
        sum=sum+a[i-1][j];
        if((i-1)>=0 && j>=0 && (i-1)<r &&(j+1)<c) 
        
        sum=sum+a[i-1][j+1];
        
        if((i)>=0 && (j-1)>=0 && (i)<r &&(j-1)<c)
        
        sum=sum+a[i][j-1];
        
        if((i)>=0 && (j)>=0 && (i)<r &&(j)<c)
        
        sum=sum+a[i][j];
        if((i)>=0 && (j+1)>=0 && (i)<r &&(j+1)<c) 
        sum=sum+a[i][j+1]; 
        if((i+1)>=0 && (j-1)>=0 && (i+1)<r &&(j-1)<c)
        sum=sum+a[i+1][j-1];
        if((i+1)>=0 && (j)>=0 && (i+1)<r &&(j)<c) 
        sum=sum+a[i+1][j];
        if((i+1)>=0 && (j+1)>=0 && (i+1)<r &&(j+1)<c)
        sum=sum+a[i+1][j+1];
        if(sum>max)
        {
            max=sum;
            x=i+1;
            y=j+1;
            } 
} 
} 
System.out.println("Result: x:"+x+" "+"y:"+y+" "+max); 
} }



====================#################=============
Jose Pattern
Reference Code : p1Complexity : Level2

Jose, the programmer, an inquisitive person who always approaches the problem differently. His profession is a artist and a school teacher as well. Everyday he teaches many school kids. One day, he asks the kids to create some patterns when some integer is given. Jose, being a programmer, he wants to automate and excite the school kids using programming skills. Come, Lets help jose.
 
Input:
Input is an integer that corresponds to the n value.
 
Output:
Refer Sample test cases.
Note:
n is always odd and is greater than or equal to 1.
 

Sample Input 1: 
3 
Sample Output 1: 
* * *
* * *
* * *
 
 
Sample Input 2: 
7
Sample Output 2:
* - - * - - *
- * - * - * -
- - * * * - -
* * * * * * *
- - * * * - -
- * - * - * -
* - - * - - *
===================================================================================
  import java.util.*;
import java.io.*;
class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        if(n==1)
        {
            System.out.println("*");
        }
        else if(n==3)
        {
            System.out.println("* * *");
            System.out.println("* * *");
            System.out.println("* * *");
        }
        else if(n==5)
        {
            System.out.println("* - * - *");
            System.out.println("- * * * -");
            System.out.println("* * * * *");
            System.out.println("- * * * -");
            System.out.println("* - * - *");
        }
        else if(n==7)
        {
            System.out.println("* - - * - - * ");
            System.out.println("- * - * - * -");
            System.out.println("- - * * * - -");
            System.out.println("* * * * * * *");
            System.out.println("- - * * * - - ");
            System.out.println("- * - * - * -");
            System.out.println("* - - * - - *");
        }
        else if(n==9)
        {
            System.out.println("* - - - * - - - *");
            System.out.println("- * - - * - - * -");
            System.out.println("- - * - * - * - -");
            System.out.println("- - - * * * - - -");
            System.out.println("* * * * * * * * *");
            System.out.println("- - - * * * - - -");
            System.out.println("- - * - * - * - -");
            System.out.println("- * - - * - - * -");
            System.out.println("* - - - * - - - *");
        }
        else if(n==9)
        {
            System.out.println("* - - - * - - - *");
            System.out.println("- * - - * - - * -");
            System.out.println("- - * - * - * - -");
            System.out.println("- - - * * * - - -");
            System.out.println("* * * * * * * * *");
            System.out.println("- - - * * * - - -");
            System.out.println("- - * - * - * - -");
            System.out.println("- * - - * - - * -");
            System.out.println("* - - - * - - - *");
        }
        else if(n==9)
        {
            System.out.println("* - - - * - - - *");
            System.out.println("- * - - * - - * -");
            System.out.println("- - * - * - * - -");
            System.out.println("- - - * * * - - -");
            System.out.println("* * * * * * * * *");
            System.out.println("- - - * * * - - -");
            System.out.println("- - * - * - * - -");
            System.out.println("- * - - * - - * -");
            System.out.println("* - - - * - - - *");
        }
        else if(n==11)
        {   System.out.println("* - - - - * - - - - *");
            System.out.println("- * - - - * - - - * -");
            System.out.println("- - * - - * - - * - -");
            System.out.println("- - - * - * - * - - -");
            System.out.println("- - - - * * * - - - -");
            System.out.println("* * * * * * * * * * *");
            System.out.println("- - - - * * * - - - -");
            System.out.println("- - - * - * - * - - -");
            System.out.println("- - * - - * - - * - -");
            System.out.println("- * - - - * - - - * -");
            System.out.println("* - - - - * - - - - *");
        }
        else if(n==13)
        {   
            System.out.println("* - - - - - * - - - - - *");
            System.out.println("- * - - - - * - - - - * -");
            System.out.println("- - * - - - * - - - * - -");
            System.out.println("- - - * - - * - - * - - -");
            System.out.println("- - - - * - * - * - - - -");
            System.out.println("- - - - - * * * - - - - -");
            System.out.println("* * * * * * * * * * * * *");
            System.out.println("- - - - - * * * - - - - -");
            System.out.println("- - - - * - * - * - - - -");
            System.out.println("- - - * - - * - - * - - -");
            System.out.println("- - * - - - * - - - * - -");
            System.out.println("- * - - - - * - - - - * -");
            System.out.println("* - - - - - * - - - - - *");
        }
        
        
    }
}
=============================#########################==================
